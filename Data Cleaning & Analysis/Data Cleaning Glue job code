import boto3
import pandas as pd
from io import StringIO

# Initialize S3 client
s3_client = boto3.client('s3')

# Bucket and folder details
bucket_name = 'fetchfromapi'
folder_name = 'data'

file_names = ['mf1.csv', 'mf2.csv', 'mf3.csv', 'mf4.csv', 'mf5.csv', 'mf6.csv']
dfs = []

# Read each CSV file into a DataFrame
for file_name in file_names:
    s3_file_key = f'{folder_name}/{file_name}'
    obj = s3_client.get_object(Bucket=bucket_name, Key=s3_file_key)
    df = pd.read_csv(StringIO(obj['Body'].read().decode('utf-8')))
    dfs.append(df)

# Assign DataFrames to individual variables
df1, df2, df3, df4, df5, df6 = dfs
df = pd.concat([df1, df2, df3, df4, df5, df6], ignore_index=True)

# Data cleaning
df = df.drop_duplicates(subset=['schemeCode', 'schemeName', 'fund_house', 'scheme_type',
       'scheme_category', 'date', 'nav'])

df = df.dropna()

df['date'] = pd.to_datetime(df['date'], errors='coerce', dayfirst=True)

df = df.sort_values(by='date', ascending=False)

#Clean scheme_category

def categorize_scheme_category(scheme):
    if 'Debt Scheme' in scheme:
        return 'Debt Scheme'
    elif 'Equity Scheme' in scheme:
        return 'Equity Scheme'
    elif 'Hybrid Scheme' in scheme:
        return 'Hybrid Scheme'
    elif 'Other Scheme' in scheme:
        return 'Other Scheme'
    elif 'Solution Oriented Scheme' in scheme:
        return 'Solution Oriented Scheme'
    elif any(keyword in scheme for keyword in ['Days', 'Plan', 'Daily', 'Half Yearly', 'Annual', 'Compulsory']):
        return 'Duration/Plan'
    elif 'Direct' in scheme or 'Payout' in scheme:
        return 'Direct/Payout'
    elif 'IDF' in scheme or 'Growth' in scheme or 'Liquid' in scheme:
        return 'IDF/Growth/Liquid'
    else:
        return 'Uncategorized'
df['scheme_category'] = df['scheme_category'].apply(categorize_scheme_category)

#Clean scheme_type

def categorize_scheme_type(scheme):
    if 'Mutual Fund' in scheme:
        return 'Mutual Fund'
    elif 'Open Ended' in scheme:
        return 'Open Ended Scheme'
    elif 'Close Ended' in scheme:
        return 'Close Ended Scheme'
    elif 'Interval Fund' in scheme:
        return 'Interval Fund'
    elif 'Debt' in scheme or 'FMP' in scheme:
        return 'Debt Scheme'
    elif 'Hybrid' in scheme:
        return 'Hybrid Scheme'
    elif 'Equity' in scheme:
        return 'Equity Scheme'
    elif 'Index Fund' in scheme:
        return 'Index Fund'
    elif 'Liquid' in scheme or 'Ultra Short Duration' in scheme:
        return 'Liquid/Ultra Short Duration Fund'
    elif 'Plan' in scheme or 'Days' in scheme:
        return 'Plan/Duration'
    else:
        return 'Uncategorized'
df['scheme_type'] = df['scheme_type'].apply(categorize_scheme_type)

# Store CSV locally

csv_file_path = "mf_historical_clean.csv"
df.to_csv(csv_file_path, index=False)

# Upload CSV file to S3 bucket
s3_bucket_name = 'fetchfromapi'
s3_file_key = 'cleaneddata/mf_historical_clean.parquet'

s3_client = boto3.client('s3')
try:
    s3_client.upload_file(csv_file_path, s3_bucket_name, s3_file_key)
    print(f"File '{csv_file_path}' uploaded to S3 bucket '{s3_bucket_name}' with key '{s3_file_key}'")
except Exception as e:
    print(f"Failed to upload file to S3: {e}")

print("The data has been cleaned successfully")
